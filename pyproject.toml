[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "arabic-qwen-base-finetuning"
version = "1.0.0"
description = "A comprehensive framework for fine-tuning Qwen models on Arabic datasets with support for SFT, DPO, KTO, IPO, and CPO training methods"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "Arabic NLP Team", email = "contact@arabic-nlp.org"},
]
maintainers = [
    {name = "Arabic NLP Team", email = "contact@arabic-nlp.org"},
]
keywords = [
    "arabic",
    "nlp",
    "qwen",
    "fine-tuning",
    "sft",
    "dpo",
    "kto",
    "ipo",
    "cpo",
    "preference-optimization",
    "language-model",
    "transformers",
    "pytorch",
    "huggingface",
    "machine-learning",
    "deep-learning",
    "artificial-intelligence",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Text Processing :: Linguistic",
    "Natural Language :: Arabic",
    "Natural Language :: English",
]
dependencies = [
    # Core ML/DL frameworks
    "torch>=2.0.0",
    "transformers>=4.35.0",
    "datasets>=2.14.0",
    "tokenizers>=0.14.0",
    "accelerate>=0.24.0",
    "peft>=0.6.0",
    "trl>=0.7.0",
    
    # Quantization and optimization
    "bitsandbytes>=0.41.0",
    "optimum>=1.14.0",
    "auto-gptq>=0.4.0",
    
    # Data processing
    "pandas>=1.5.0",
    "numpy>=1.21.0",
    "pyarrow>=10.0.0",
    "datasets>=2.14.0",
    
    # Arabic text processing
    "arabic-reshaper>=3.0.0",
    "python-bidi>=0.4.2",
    "pyarabic>=0.6.15",
    "camel-tools>=1.5.0",
    
    # Configuration and utilities
    "pyyaml>=6.0",
    "omegaconf>=2.3.0",
    "hydra-core>=1.3.0",
    "python-dotenv>=1.0.0",
    
    # Logging and monitoring
    "wandb>=0.15.0",
    "tensorboard>=2.14.0",
    "mlflow>=2.7.0",
    "loguru>=0.7.0",
    
    # Progress and visualization
    "tqdm>=4.65.0",
    "rich>=13.0.0",
    "matplotlib>=3.6.0",
    "seaborn>=0.12.0",
    
    # File I/O and utilities
    "requests>=2.28.0",
    "aiohttp>=3.8.0",
    "aiofiles>=23.0.0",
    "click>=8.1.0",
    "typer>=0.9.0",
    
    # Memory and performance
    "psutil>=5.9.0",
    "memory-profiler>=0.61.0",
    "py-spy>=0.3.14",
]

[project.optional-dependencies]
dev = [
    # Code quality
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pylint>=2.17.0",
    "bandit>=1.7.5",
    "safety>=2.3.0",
    
    # Pre-commit hooks
    "pre-commit>=3.4.0",
    
    # Development tools
    "ipython>=8.15.0",
    "ipdb>=0.13.13",
    "jupyter>=1.0.0",
    "notebook>=7.0.0",
    "jupyterlab>=4.0.0",
]

testing = [
    # Testing framework
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.0",
    "pytest-mock>=3.11.0",
    "pytest-asyncio>=0.21.0",
    "pytest-timeout>=2.1.0",
    "pytest-benchmark>=4.0.0",
    "pytest-html>=3.2.0",
    "pytest-json-report>=1.5.0",
    
    # Coverage and reporting
    "coverage>=7.3.0",
    "coverage-badge>=1.1.0",
    
    # Mocking and fixtures
    "factory-boy>=3.3.0",
    "faker>=19.6.0",
    "responses>=0.23.0",
    "httpx>=0.24.0",
    
    # Performance testing
    "locust>=2.16.0",
    "memory-profiler>=0.61.0",
]

docs = [
    # Documentation
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    "sphinx-autodoc-typehints>=1.24.0",
    "myst-parser>=2.0.0",
    "sphinx-copybutton>=0.5.2",
    "sphinx-tabs>=3.4.1",
    "sphinxcontrib-mermaid>=0.9.2",
    
    # API documentation
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.2.0",
    "mkdocstrings>=0.23.0",
    "mkdocs-jupyter>=0.24.0",
]

monitoring = [
    # Monitoring and observability
    "prometheus-client>=0.17.0",
    "grafana-api>=1.0.3",
    "elasticsearch>=8.9.0",
    "kibana-api>=0.1.0",
    
    # Distributed tracing
    "opentelemetry-api>=1.19.0",
    "opentelemetry-sdk>=1.19.0",
    "opentelemetry-instrumentation>=0.40b0",
    "jaeger-client>=4.8.0",
]

visualization = [
    # Advanced visualization
    "plotly>=5.16.0",
    "bokeh>=3.2.0",
    "altair>=5.1.0",
    "streamlit>=1.26.0",
    "gradio>=3.44.0",
    "dash>=2.13.0",
]

serving = [
    # Model serving
    "fastapi>=0.103.0",
    "uvicorn>=0.23.0",
    "gunicorn>=21.2.0",
    "redis>=4.6.0",
    "celery>=5.3.0",
    
    # API utilities
    "pydantic>=2.3.0",
    "httpx>=0.24.0",
    "websockets>=11.0.0",
]

cloud = [
    # Cloud providers
    "boto3>=1.28.0",
    "google-cloud-storage>=2.10.0",
    "azure-storage-blob>=12.17.0",
    
    # Cloud ML platforms
    "sagemaker>=2.178.0",
    "google-cloud-aiplatform>=1.32.0",
    "azure-ai-ml>=1.9.0",
]

optimization = [
    # Advanced optimization
    "deepspeed>=0.10.0",
    "fairscale>=0.4.13",
    "apex",  # NVIDIA Apex for mixed precision
    
    # Distributed training
    "horovod>=0.28.0",
    "ray[tune]>=2.6.0",
    "optuna>=3.3.0",
]

quantization = [
    # Quantization libraries
    "onnx>=1.14.0",
    "onnxruntime>=1.15.0",
    "tensorrt>=8.6.0",
    "openvino>=2023.1.0",
    
    # Model compression
    "neural-compressor>=2.3.0",
    "pruning>=0.1.0",
]

nlp = [
    # NLP libraries
    "nltk>=3.8.0",
    "spacy>=3.6.0",
    "stanza>=1.5.0",
    "polyglot>=16.7.4",
    
    # Evaluation metrics
    "sacrebleu>=2.3.0",
    "rouge-score>=0.1.2",
    "bert-score>=0.3.13",
    "bleurt>=0.0.2",
]

jupyter = [
    # Jupyter extensions
    "jupyterlab-widgets>=3.0.0",
    "ipywidgets>=8.1.0",
    "jupyter-dash>=0.4.2",
    "papermill>=2.4.0",
    "nbconvert>=7.8.0",
]

all = [
    "arabic-qwen-base-finetuning[dev,testing,docs,monitoring,visualization,serving,cloud,optimization,quantization,nlp,jupyter]"
]

[project.urls]
Homepage = "https://github.com/artaasd95/arabic-qwen-base-finetuning"
Documentation = "https://arabic-qwen-base-finetuning.readthedocs.io/"
Repository = "https://github.com/artaasd95/arabic-qwen-base-finetuning"
"Bug Tracker" = "https://github.com/artaasd95/arabic-qwen-base-finetuning/issues"
Changelog = "https://github.com/artaasd95/arabic-qwen-base-finetuning/blob/main/CHANGELOG.md"
"Funding" = "https://github.com/sponsors/arabic-nlp"

[project.scripts]
arabic-qwen-train = "src.training.cli:main"
arabic-qwen-eval = "src.evaluation.cli:main"
arabic-qwen-serve = "src.serving.cli:main"
arabic-qwen-data = "src.data.cli:main"
arabic-qwen-config = "src.config.cli:main"

[project.entry-points."arabic_qwen.trainers"]
sft = "src.training.sft:SFTTrainer"
dpo = "src.training.dpo:DPOTrainer"
kto = "src.training.kto:KTOTrainer"
ipo = "src.training.ipo:IPOTrainer"
cpo = "src.training.cpo:CPOTrainer"

[project.entry-points."arabic_qwen.evaluators"]
generation = "src.evaluation.generation:GenerationEvaluator"
classification = "src.evaluation.classification:ClassificationEvaluator"
preference = "src.evaluation.preference:PreferenceEvaluator"

[project.entry-points."arabic_qwen.data_loaders"]
conversation = "src.data.loaders:ConversationDataLoader"
instruction = "src.data.loaders:InstructionDataLoader"
preference = "src.data.loaders:PreferenceDataLoader"

# =============================================================================
# Tool Configuration
# =============================================================================

[tool.setuptools]
include-package-data = true

[tool.setuptools.packages.find]
where = ["src"]
include = ["*"]
exclude = ["tests*"]

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json", "*.txt", "*.md", "*.cfg", "*.ini"]

# =============================================================================
# Black Configuration
# =============================================================================

[tool.black]
line-length = 88
target-version = ["py38", "py39", "py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
(
  /(
      \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
    | node_modules
  )/
)
'''

# =============================================================================
# isort Configuration
# =============================================================================

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["src", "tests"]
skip_glob = ["*/__pycache__/*", "*/.*"]
known_first_party = ["src"]
known_third_party = [
    "torch",
    "transformers",
    "datasets",
    "numpy",
    "pandas",
    "pytest",
    "wandb",
    "mlflow",
    "tensorboard",
    "peft",
    "trl",
    "accelerate",
    "bitsandbytes",
    "optimum",
]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

# =============================================================================
# MyPy Configuration
# =============================================================================

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
ignore_missing_imports = true

# Specific module configurations
[[tool.mypy.overrides]]
module = [
    "torch.*",
    "transformers.*",
    "datasets.*",
    "wandb.*",
    "mlflow.*",
    "tensorboard.*",
    "peft.*",
    "trl.*",
    "accelerate.*",
    "bitsandbytes.*",
    "optimum.*",
    "arabic_reshaper.*",
    "bidi.*",
    "pyarabic.*",
    "camel_tools.*",
]
ignore_missing_imports = true

# =============================================================================
# Pytest Configuration
# =============================================================================

[tool.pytest.ini_options]
minversion = "7.0"
addopts = """
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --cov=src
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    --junit-xml=junit.xml
    --maxfail=5
    --durations=10
"""
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m "not slow"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "gpu: marks tests that require GPU",
    "model: marks tests that require model loading",
    "data: marks tests related to data processing",
    "config: marks tests related to configuration",
    "training: marks tests related to training",
    "evaluation: marks tests related to evaluation",
    "utils: marks tests related to utilities",
    "arabic: marks tests specific to Arabic language processing",
    "performance: marks tests that measure performance",
    "memory: marks tests that measure memory usage",
    "distributed: marks tests for distributed training",
    "quantization: marks tests for model quantization",
    "serving: marks tests for model serving",
    "api: marks tests for API endpoints",
    "cli: marks tests for command-line interface",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::FutureWarning",
    "ignore:.*CUDA.*:UserWarning",
    "ignore:.*torch.*:UserWarning",
    "ignore:.*transformers.*:UserWarning",
    "ignore:.*datasets.*:UserWarning",
]
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
log_file = "tests.log"
log_file_level = "DEBUG"
log_file_format = "%(asctime)s [%(levelname)8s] %(filename)s:%(lineno)d %(funcName)s(): %(message)s"
log_file_date_format = "%Y-%m-%d %H:%M:%S"

# =============================================================================
# Coverage Configuration
# =============================================================================

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/.*",
    "setup.py",
    "*/site-packages/*",
    "*/venv/*",
    "*/env/*",
    "*/.venv/*",
    "*/.env/*",
]
branch = true
parallel = true
concurrency = ["multiprocessing", "thread"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\bProtocol\):",
    "@(abc\.)?abstractmethod",
    "@(abc\.)?abstractproperty",
    "@(abc\.)?abstractclassmethod",
    "@(abc\.)?abstractstaticmethod",
    "TYPE_CHECKING",
]
ignore_errors = true
show_missing = true
skip_covered = false
skip_empty = false
sort = "Cover"
precision = 2

[tool.coverage.html]
directory = "htmlcov"
show_contexts = true

[tool.coverage.xml]
output = "coverage.xml"

# =============================================================================
# Bandit Configuration (Security)
# =============================================================================

[tool.bandit]
exclude_dirs = ["tests", "build", "dist", ".venv", "venv", ".env", "env"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection_process_args

# =============================================================================
# Pylint Configuration
# =============================================================================

[tool.pylint.main]
load-plugins = [
    "pylint.extensions.check_elif",
    "pylint.extensions.bad_builtin",
    "pylint.extensions.docparams",
    "pylint.extensions.for_any_all",
    "pylint.extensions.set_membership",
    "pylint.extensions.code_style",
    "pylint.extensions.overlapping_exceptions",
    "pylint.extensions.typing",
    "pylint.extensions.redefined_variable_type",
    "pylint.extensions.comparison_placement",
]

[tool.pylint.messages_control]
disable = [
    "C0103",  # invalid-name
    "C0114",  # missing-module-docstring
    "C0115",  # missing-class-docstring
    "C0116",  # missing-function-docstring
    "R0903",  # too-few-public-methods
    "R0913",  # too-many-arguments
    "R0914",  # too-many-locals
    "R0915",  # too-many-statements
    "W0613",  # unused-argument
    "W0622",  # redefined-builtin
]

[tool.pylint.format]
max-line-length = 88

[tool.pylint.design]
max-args = 10
max-locals = 20
max-returns = 8
max-branches = 15
max-statements = 60
max-parents = 10
max-attributes = 15
min-public-methods = 1
max-public-methods = 25
max-bool-expr = 5

[tool.pylint.similarities]
min-similarity-lines = 4
ignore-comments = true
ignore-docstrings = true
ignore-imports = true
ignore-signatures = true

# =============================================================================
# Flake8 Configuration
# =============================================================================

[tool.flake8]
max-line-length = 88
max-complexity = 10
select = ["E", "W", "F", "C"]
ignore = [
    "E203",  # whitespace before ':'
    "E501",  # line too long (handled by black)
    "W503",  # line break before binary operator
    "W504",  # line break after binary operator
    "C901",  # too complex (handled by pylint)
]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    "venv",
    ".env",
    "env",
    ".tox",
    ".mypy_cache",
    ".pytest_cache",
    "*.egg-info",
]
per-file-ignores = [
    "__init__.py:F401",  # imported but unused
    "tests/*:F401,F811",  # test files can have unused imports and redefined names
]

# =============================================================================
# Ruff Configuration (Alternative to flake8/isort/black)
# =============================================================================

[tool.ruff]
line-length = 88
target-version = "py38"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "ICN", # flake8-import-conventions
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PYI", # flake8-pyi
    "PT",  # flake8-pytest-style
    "Q",   # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "TID", # flake8-tidy-imports
    "TCH", # flake8-type-checking
    "RUF", # Ruff-specific rules
]
ignore = [
    "E501",   # line too long (handled by black)
    "B008",   # do not perform function calls in argument defaults
    "B905",   # zip without explicit strict parameter
    "C901",   # too complex
    "T201",   # print found
    "T203",   # pprint found
    "ARG002", # unused method argument
    "ARG003", # unused class method argument
    "SIM108", # use ternary operator instead of if-else
    "RUF012", # mutable class attributes should be annotated with ClassVar
]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    "venv",
    ".env",
    "env",
    ".tox",
    ".mypy_cache",
    ".pytest_cache",
    "*.egg-info",
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # imported but unused
"tests/*" = ["F401", "F811", "ARG001", "ARG002"]  # test files exceptions

[tool.ruff.isort]
known-first-party = ["src"]
known-third-party = [
    "torch",
    "transformers",
    "datasets",
    "numpy",
    "pandas",
    "pytest",
    "wandb",
    "mlflow",
    "tensorboard",
    "peft",
    "trl",
    "accelerate",
    "bitsandbytes",
    "optimum",
]

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.pyupgrade]
keep-runtime-typing = true

# =============================================================================
# Pre-commit Configuration
# =============================================================================

[tool.pre-commit]
repos = [
    {
        repo = "https://github.com/pre-commit/pre-commit-hooks",
        rev = "v4.4.0",
        hooks = [
            {id = "trailing-whitespace"},
            {id = "end-of-file-fixer"},
            {id = "check-yaml"},
            {id = "check-added-large-files"},
            {id = "check-merge-conflict"},
            {id = "debug-statements"},
            {id = "check-docstring-first"},
        ]
    },
    {
        repo = "https://github.com/psf/black",
        rev = "23.7.0",
        hooks = [{id = "black"}]
    },
    {
        repo = "https://github.com/pycqa/isort",
        rev = "5.12.0",
        hooks = [{id = "isort"}]
    },
    {
        repo = "https://github.com/pycqa/flake8",
        rev = "6.0.0",
        hooks = [{id = "flake8"}]
    },
    {
        repo = "https://github.com/pre-commit/mirrors-mypy",
        rev = "v1.5.1",
        hooks = [{id = "mypy", additional_dependencies = ["types-all"]}]
    },
    {
        repo = "https://github.com/pycqa/bandit",
        rev = "1.7.5",
        hooks = [{id = "bandit", args = ["-c", "pyproject.toml"]}]
    },
]

# =============================================================================
# Semantic Release Configuration
# =============================================================================

[tool.semantic_release]
version_toml = ["pyproject.toml:project.version"]
version_variables = ["src/__init__.py:__version__"]
build_command = "python -m build"
upload_to_pypi = false
upload_to_release = true
remove_dist = false
commit_author = "github-actions <action@github.com>"
commit_message = "chore(release): {version} [skip ci]"
tag_format = "v{version}"
changelog_file = "CHANGELOG.md"
changelog_sections = "feature,fix,breaking,documentation,performance,refactor"

[tool.semantic_release.branches.main]
match = "main"
prerelease = false

[tool.semantic_release.branches.develop]
match = "develop"
prerelease = true
prerelease_token = "dev"

# =============================================================================
# Sphinx Configuration
# =============================================================================

[tool.sphinx]
source-dir = "docs"
build-dir = "docs/_build"
all_files = true

# =============================================================================
# Jupyter Configuration
# =============================================================================

[tool.jupyter]
kernel_name = "arabic-qwen"
display_name = "Arabic Qwen Fine-tuning"
language = "python"

# =============================================================================
# Custom Tool Configurations
# =============================================================================

[tool.arabic-qwen]
default_config_dir = "config"
default_data_dir = "data"
default_output_dir = "outputs"
default_checkpoint_dir = "checkpoints"
default_log_dir = "logs"
default_cache_dir = ".cache"

[tool.arabic-qwen.training]
default_method = "sft"
default_model = "Qwen/Qwen-7B"
default_tokenizer = "Qwen/Qwen-7B"
default_max_length = 2048
default_batch_size = 4
default_learning_rate = 5e-5
default_num_epochs = 3

[tool.arabic-qwen.evaluation]
default_metrics = ["bleu", "rouge", "bertscore"]
default_batch_size = 8
default_max_new_tokens = 512

[tool.arabic-qwen.serving]
default_host = "0.0.0.0"
default_port = 8000
default_workers = 1
default_timeout = 60

# =============================================================================
# End of pyproject.toml
# =============================================================================